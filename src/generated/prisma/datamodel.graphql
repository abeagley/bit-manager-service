# source: http://bm_prisma:4466
# timestamp: Mon Oct 15 2018 19:48:59 GMT-0600 (MDT)

type AggregateBit {
  count: Int!
}

type AggregateBitExport {
  count: Int!
}

type AggregateBitScope {
  count: Int!
}

type AggregateSetting {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Bit implements Node {
  bindingPrefix: String
  box: String!
  compiler: String
  createdAt: DateTime!
  dependencies: Json
  deprecated: Boolean
  devPackageDependencies: Json
  dists: Json
  docs: Json
  envsPackageDepedencies: Json
  files: Json
  id: ID!
  lang: String
  license: String
  log: Json
  mainFile: String
  name: String!
  packageDependencies: Json
  peerPackageDepedencies: Json
  scope(where: BitScopeWhereInput): BitScope!
  specsResults: Json
  tester: String
  updatedAt: DateTime!
  version: String!
}

"""A connection to a list of items."""
type BitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BitEdge]!
  aggregate: AggregateBit!
}

input BitCreateInput {
  bindingPrefix: String
  box: String!
  compiler: String
  dependencies: Json
  deprecated: Boolean
  devPackageDependencies: Json
  dists: Json
  docs: Json
  envsPackageDepedencies: Json
  files: Json
  lang: String
  license: String
  log: Json
  mainFile: String
  name: String!
  packageDependencies: Json
  peerPackageDepedencies: Json
  specsResults: Json
  tester: String
  version: String!
  scope: BitScopeCreateOneWithoutBitsInput!
}

input BitCreateManyWithoutScopeInput {
  create: [BitCreateWithoutScopeInput!]
  connect: [BitWhereUniqueInput!]
}

input BitCreateOneInput {
  create: BitCreateInput
  connect: BitWhereUniqueInput
}

input BitCreateWithoutScopeInput {
  bindingPrefix: String
  box: String!
  compiler: String
  dependencies: Json
  deprecated: Boolean
  devPackageDependencies: Json
  dists: Json
  docs: Json
  envsPackageDepedencies: Json
  files: Json
  lang: String
  license: String
  log: Json
  mainFile: String
  name: String!
  packageDependencies: Json
  peerPackageDepedencies: Json
  specsResults: Json
  tester: String
  version: String!
}

"""An edge in a connection."""
type BitEdge {
  """The item at the end of the edge."""
  node: Bit!

  """A cursor for use in pagination."""
  cursor: String!
}

type BitExport implements Node {
  bit(where: BitWhereInput): Bit!
  createdAt: DateTime!
  id: ID!
  isComplete: Boolean!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BitExportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BitExportEdge]!
  aggregate: AggregateBitExport!
}

input BitExportCreateInput {
  isComplete: Boolean
  bit: BitCreateOneInput!
}

"""An edge in a connection."""
type BitExportEdge {
  """The item at the end of the edge."""
  node: BitExport!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BitExportOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  isComplete_ASC
  isComplete_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BitExportPreviousValues {
  createdAt: DateTime!
  id: ID!
  isComplete: Boolean!
  updatedAt: DateTime!
}

type BitExportSubscriptionPayload {
  mutation: MutationType!
  node: BitExport
  updatedFields: [String!]
  previousValues: BitExportPreviousValues
}

input BitExportSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BitExportSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BitExportSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BitExportSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BitExportWhereInput
}

input BitExportUpdateInput {
  isComplete: Boolean
  bit: BitUpdateOneRequiredInput
}

input BitExportWhereInput {
  """Logical AND on all given filters."""
  AND: [BitExportWhereInput!]

  """Logical OR on all given filters."""
  OR: [BitExportWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BitExportWhereInput!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isComplete: Boolean

  """All values that are not equal to given value."""
  isComplete_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  bit: BitWhereInput
}

input BitExportWhereUniqueInput {
  id: ID
}

enum BitOrderByInput {
  bindingPrefix_ASC
  bindingPrefix_DESC
  box_ASC
  box_DESC
  compiler_ASC
  compiler_DESC
  createdAt_ASC
  createdAt_DESC
  dependencies_ASC
  dependencies_DESC
  deprecated_ASC
  deprecated_DESC
  devPackageDependencies_ASC
  devPackageDependencies_DESC
  dists_ASC
  dists_DESC
  docs_ASC
  docs_DESC
  envsPackageDepedencies_ASC
  envsPackageDepedencies_DESC
  files_ASC
  files_DESC
  id_ASC
  id_DESC
  lang_ASC
  lang_DESC
  license_ASC
  license_DESC
  log_ASC
  log_DESC
  mainFile_ASC
  mainFile_DESC
  name_ASC
  name_DESC
  packageDependencies_ASC
  packageDependencies_DESC
  peerPackageDepedencies_ASC
  peerPackageDepedencies_DESC
  specsResults_ASC
  specsResults_DESC
  tester_ASC
  tester_DESC
  updatedAt_ASC
  updatedAt_DESC
  version_ASC
  version_DESC
}

type BitPreviousValues {
  bindingPrefix: String
  box: String!
  compiler: String
  createdAt: DateTime!
  dependencies: Json
  deprecated: Boolean
  devPackageDependencies: Json
  dists: Json
  docs: Json
  envsPackageDepedencies: Json
  files: Json
  id: ID!
  lang: String
  license: String
  log: Json
  mainFile: String
  name: String!
  packageDependencies: Json
  peerPackageDepedencies: Json
  specsResults: Json
  tester: String
  updatedAt: DateTime!
  version: String!
}

type BitScope implements Node {
  bits(where: BitWhereInput, orderBy: BitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bit!]
  createdAt: DateTime!
  description: String!
  id: ID!
  isLocal: Boolean!
  name: String!
  pathName: String!
  updatedAt: DateTime!
  url: String
}

"""A connection to a list of items."""
type BitScopeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BitScopeEdge]!
  aggregate: AggregateBitScope!
}

input BitScopeCreateInput {
  description: String!
  isLocal: Boolean
  name: String!
  pathName: String!
  url: String
  bits: BitCreateManyWithoutScopeInput
}

input BitScopeCreateOneWithoutBitsInput {
  create: BitScopeCreateWithoutBitsInput
  connect: BitScopeWhereUniqueInput
}

input BitScopeCreateWithoutBitsInput {
  description: String!
  isLocal: Boolean
  name: String!
  pathName: String!
  url: String
}

"""An edge in a connection."""
type BitScopeEdge {
  """The item at the end of the edge."""
  node: BitScope!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BitScopeOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  isLocal_ASC
  isLocal_DESC
  name_ASC
  name_DESC
  pathName_ASC
  pathName_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type BitScopePreviousValues {
  createdAt: DateTime!
  description: String!
  id: ID!
  isLocal: Boolean!
  name: String!
  pathName: String!
  updatedAt: DateTime!
  url: String
}

type BitScopeSubscriptionPayload {
  mutation: MutationType!
  node: BitScope
  updatedFields: [String!]
  previousValues: BitScopePreviousValues
}

input BitScopeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BitScopeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BitScopeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BitScopeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BitScopeWhereInput
}

input BitScopeUpdateInput {
  description: String
  isLocal: Boolean
  name: String
  pathName: String
  url: String
  bits: BitUpdateManyWithoutScopeInput
}

input BitScopeUpdateOneRequiredWithoutBitsInput {
  create: BitScopeCreateWithoutBitsInput
  connect: BitScopeWhereUniqueInput
  update: BitScopeUpdateWithoutBitsDataInput
  upsert: BitScopeUpsertWithoutBitsInput
}

input BitScopeUpdateWithoutBitsDataInput {
  description: String
  isLocal: Boolean
  name: String
  pathName: String
  url: String
}

input BitScopeUpsertWithoutBitsInput {
  update: BitScopeUpdateWithoutBitsDataInput!
  create: BitScopeCreateWithoutBitsInput!
}

input BitScopeWhereInput {
  """Logical AND on all given filters."""
  AND: [BitScopeWhereInput!]

  """Logical OR on all given filters."""
  OR: [BitScopeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BitScopeWhereInput!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isLocal: Boolean

  """All values that are not equal to given value."""
  isLocal_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  pathName: String

  """All values that are not equal to given value."""
  pathName_not: String

  """All values that are contained in given list."""
  pathName_in: [String!]

  """All values that are not contained in given list."""
  pathName_not_in: [String!]

  """All values less than the given value."""
  pathName_lt: String

  """All values less than or equal the given value."""
  pathName_lte: String

  """All values greater than the given value."""
  pathName_gt: String

  """All values greater than or equal the given value."""
  pathName_gte: String

  """All values containing the given string."""
  pathName_contains: String

  """All values not containing the given string."""
  pathName_not_contains: String

  """All values starting with the given string."""
  pathName_starts_with: String

  """All values not starting with the given string."""
  pathName_not_starts_with: String

  """All values ending with the given string."""
  pathName_ends_with: String

  """All values not ending with the given string."""
  pathName_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  bits_every: BitWhereInput
  bits_some: BitWhereInput
  bits_none: BitWhereInput
}

input BitScopeWhereUniqueInput {
  id: ID
  name: String
  pathName: String
  url: String
}

type BitSubscriptionPayload {
  mutation: MutationType!
  node: Bit
  updatedFields: [String!]
  previousValues: BitPreviousValues
}

input BitSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BitSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BitSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BitSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BitWhereInput
}

input BitUpdateDataInput {
  bindingPrefix: String
  box: String
  compiler: String
  dependencies: Json
  deprecated: Boolean
  devPackageDependencies: Json
  dists: Json
  docs: Json
  envsPackageDepedencies: Json
  files: Json
  lang: String
  license: String
  log: Json
  mainFile: String
  name: String
  packageDependencies: Json
  peerPackageDepedencies: Json
  specsResults: Json
  tester: String
  version: String
  scope: BitScopeUpdateOneRequiredWithoutBitsInput
}

input BitUpdateInput {
  bindingPrefix: String
  box: String
  compiler: String
  dependencies: Json
  deprecated: Boolean
  devPackageDependencies: Json
  dists: Json
  docs: Json
  envsPackageDepedencies: Json
  files: Json
  lang: String
  license: String
  log: Json
  mainFile: String
  name: String
  packageDependencies: Json
  peerPackageDepedencies: Json
  specsResults: Json
  tester: String
  version: String
  scope: BitScopeUpdateOneRequiredWithoutBitsInput
}

input BitUpdateManyWithoutScopeInput {
  create: [BitCreateWithoutScopeInput!]
  connect: [BitWhereUniqueInput!]
  disconnect: [BitWhereUniqueInput!]
  delete: [BitWhereUniqueInput!]
  update: [BitUpdateWithWhereUniqueWithoutScopeInput!]
  upsert: [BitUpsertWithWhereUniqueWithoutScopeInput!]
}

input BitUpdateOneRequiredInput {
  create: BitCreateInput
  connect: BitWhereUniqueInput
  update: BitUpdateDataInput
  upsert: BitUpsertNestedInput
}

input BitUpdateWithoutScopeDataInput {
  bindingPrefix: String
  box: String
  compiler: String
  dependencies: Json
  deprecated: Boolean
  devPackageDependencies: Json
  dists: Json
  docs: Json
  envsPackageDepedencies: Json
  files: Json
  lang: String
  license: String
  log: Json
  mainFile: String
  name: String
  packageDependencies: Json
  peerPackageDepedencies: Json
  specsResults: Json
  tester: String
  version: String
}

input BitUpdateWithWhereUniqueWithoutScopeInput {
  where: BitWhereUniqueInput!
  data: BitUpdateWithoutScopeDataInput!
}

input BitUpsertNestedInput {
  update: BitUpdateDataInput!
  create: BitCreateInput!
}

input BitUpsertWithWhereUniqueWithoutScopeInput {
  where: BitWhereUniqueInput!
  update: BitUpdateWithoutScopeDataInput!
  create: BitCreateWithoutScopeInput!
}

input BitWhereInput {
  """Logical AND on all given filters."""
  AND: [BitWhereInput!]

  """Logical OR on all given filters."""
  OR: [BitWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BitWhereInput!]
  bindingPrefix: String

  """All values that are not equal to given value."""
  bindingPrefix_not: String

  """All values that are contained in given list."""
  bindingPrefix_in: [String!]

  """All values that are not contained in given list."""
  bindingPrefix_not_in: [String!]

  """All values less than the given value."""
  bindingPrefix_lt: String

  """All values less than or equal the given value."""
  bindingPrefix_lte: String

  """All values greater than the given value."""
  bindingPrefix_gt: String

  """All values greater than or equal the given value."""
  bindingPrefix_gte: String

  """All values containing the given string."""
  bindingPrefix_contains: String

  """All values not containing the given string."""
  bindingPrefix_not_contains: String

  """All values starting with the given string."""
  bindingPrefix_starts_with: String

  """All values not starting with the given string."""
  bindingPrefix_not_starts_with: String

  """All values ending with the given string."""
  bindingPrefix_ends_with: String

  """All values not ending with the given string."""
  bindingPrefix_not_ends_with: String
  box: String

  """All values that are not equal to given value."""
  box_not: String

  """All values that are contained in given list."""
  box_in: [String!]

  """All values that are not contained in given list."""
  box_not_in: [String!]

  """All values less than the given value."""
  box_lt: String

  """All values less than or equal the given value."""
  box_lte: String

  """All values greater than the given value."""
  box_gt: String

  """All values greater than or equal the given value."""
  box_gte: String

  """All values containing the given string."""
  box_contains: String

  """All values not containing the given string."""
  box_not_contains: String

  """All values starting with the given string."""
  box_starts_with: String

  """All values not starting with the given string."""
  box_not_starts_with: String

  """All values ending with the given string."""
  box_ends_with: String

  """All values not ending with the given string."""
  box_not_ends_with: String
  compiler: String

  """All values that are not equal to given value."""
  compiler_not: String

  """All values that are contained in given list."""
  compiler_in: [String!]

  """All values that are not contained in given list."""
  compiler_not_in: [String!]

  """All values less than the given value."""
  compiler_lt: String

  """All values less than or equal the given value."""
  compiler_lte: String

  """All values greater than the given value."""
  compiler_gt: String

  """All values greater than or equal the given value."""
  compiler_gte: String

  """All values containing the given string."""
  compiler_contains: String

  """All values not containing the given string."""
  compiler_not_contains: String

  """All values starting with the given string."""
  compiler_starts_with: String

  """All values not starting with the given string."""
  compiler_not_starts_with: String

  """All values ending with the given string."""
  compiler_ends_with: String

  """All values not ending with the given string."""
  compiler_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  deprecated: Boolean

  """All values that are not equal to given value."""
  deprecated_not: Boolean
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lang: String

  """All values that are not equal to given value."""
  lang_not: String

  """All values that are contained in given list."""
  lang_in: [String!]

  """All values that are not contained in given list."""
  lang_not_in: [String!]

  """All values less than the given value."""
  lang_lt: String

  """All values less than or equal the given value."""
  lang_lte: String

  """All values greater than the given value."""
  lang_gt: String

  """All values greater than or equal the given value."""
  lang_gte: String

  """All values containing the given string."""
  lang_contains: String

  """All values not containing the given string."""
  lang_not_contains: String

  """All values starting with the given string."""
  lang_starts_with: String

  """All values not starting with the given string."""
  lang_not_starts_with: String

  """All values ending with the given string."""
  lang_ends_with: String

  """All values not ending with the given string."""
  lang_not_ends_with: String
  license: String

  """All values that are not equal to given value."""
  license_not: String

  """All values that are contained in given list."""
  license_in: [String!]

  """All values that are not contained in given list."""
  license_not_in: [String!]

  """All values less than the given value."""
  license_lt: String

  """All values less than or equal the given value."""
  license_lte: String

  """All values greater than the given value."""
  license_gt: String

  """All values greater than or equal the given value."""
  license_gte: String

  """All values containing the given string."""
  license_contains: String

  """All values not containing the given string."""
  license_not_contains: String

  """All values starting with the given string."""
  license_starts_with: String

  """All values not starting with the given string."""
  license_not_starts_with: String

  """All values ending with the given string."""
  license_ends_with: String

  """All values not ending with the given string."""
  license_not_ends_with: String
  mainFile: String

  """All values that are not equal to given value."""
  mainFile_not: String

  """All values that are contained in given list."""
  mainFile_in: [String!]

  """All values that are not contained in given list."""
  mainFile_not_in: [String!]

  """All values less than the given value."""
  mainFile_lt: String

  """All values less than or equal the given value."""
  mainFile_lte: String

  """All values greater than the given value."""
  mainFile_gt: String

  """All values greater than or equal the given value."""
  mainFile_gte: String

  """All values containing the given string."""
  mainFile_contains: String

  """All values not containing the given string."""
  mainFile_not_contains: String

  """All values starting with the given string."""
  mainFile_starts_with: String

  """All values not starting with the given string."""
  mainFile_not_starts_with: String

  """All values ending with the given string."""
  mainFile_ends_with: String

  """All values not ending with the given string."""
  mainFile_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  tester: String

  """All values that are not equal to given value."""
  tester_not: String

  """All values that are contained in given list."""
  tester_in: [String!]

  """All values that are not contained in given list."""
  tester_not_in: [String!]

  """All values less than the given value."""
  tester_lt: String

  """All values less than or equal the given value."""
  tester_lte: String

  """All values greater than the given value."""
  tester_gt: String

  """All values greater than or equal the given value."""
  tester_gte: String

  """All values containing the given string."""
  tester_contains: String

  """All values not containing the given string."""
  tester_not_contains: String

  """All values starting with the given string."""
  tester_starts_with: String

  """All values not starting with the given string."""
  tester_not_starts_with: String

  """All values ending with the given string."""
  tester_ends_with: String

  """All values not ending with the given string."""
  tester_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  version: String

  """All values that are not equal to given value."""
  version_not: String

  """All values that are contained in given list."""
  version_in: [String!]

  """All values that are not contained in given list."""
  version_not_in: [String!]

  """All values less than the given value."""
  version_lt: String

  """All values less than or equal the given value."""
  version_lte: String

  """All values greater than the given value."""
  version_gt: String

  """All values greater than or equal the given value."""
  version_gte: String

  """All values containing the given string."""
  version_contains: String

  """All values not containing the given string."""
  version_not_contains: String

  """All values starting with the given string."""
  version_starts_with: String

  """All values not starting with the given string."""
  version_not_starts_with: String

  """All values ending with the given string."""
  version_ends_with: String

  """All values not ending with the given string."""
  version_not_ends_with: String
  scope: BitScopeWhereInput
}

input BitWhereUniqueInput {
  id: ID
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBitExport(data: BitExportCreateInput!): BitExport!
  createBitScope(data: BitScopeCreateInput!): BitScope!
  createSetting(data: SettingCreateInput!): Setting!
  createUser(data: UserCreateInput!): User!
  createBit(data: BitCreateInput!): Bit!
  updateBitExport(data: BitExportUpdateInput!, where: BitExportWhereUniqueInput!): BitExport
  updateBitScope(data: BitScopeUpdateInput!, where: BitScopeWhereUniqueInput!): BitScope
  updateSetting(data: SettingUpdateInput!, where: SettingWhereUniqueInput!): Setting
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateBit(data: BitUpdateInput!, where: BitWhereUniqueInput!): Bit
  deleteBitExport(where: BitExportWhereUniqueInput!): BitExport
  deleteBitScope(where: BitScopeWhereUniqueInput!): BitScope
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteUser(where: UserWhereUniqueInput!): User
  deleteBit(where: BitWhereUniqueInput!): Bit
  upsertBitExport(where: BitExportWhereUniqueInput!, create: BitExportCreateInput!, update: BitExportUpdateInput!): BitExport!
  upsertBitScope(where: BitScopeWhereUniqueInput!, create: BitScopeCreateInput!, update: BitScopeUpdateInput!): BitScope!
  upsertSetting(where: SettingWhereUniqueInput!, create: SettingCreateInput!, update: SettingUpdateInput!): Setting!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertBit(where: BitWhereUniqueInput!, create: BitCreateInput!, update: BitUpdateInput!): Bit!
  updateManyBitExports(data: BitExportUpdateInput!, where: BitExportWhereInput): BatchPayload!
  updateManyBitScopes(data: BitScopeUpdateInput!, where: BitScopeWhereInput): BatchPayload!
  updateManySettings(data: SettingUpdateInput!, where: SettingWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyBits(data: BitUpdateInput!, where: BitWhereInput): BatchPayload!
  deleteManyBitExports(where: BitExportWhereInput): BatchPayload!
  deleteManyBitScopes(where: BitScopeWhereInput): BatchPayload!
  deleteManySettings(where: SettingWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyBits(where: BitWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  bitExports(where: BitExportWhereInput, orderBy: BitExportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BitExport]!
  bitScopes(where: BitScopeWhereInput, orderBy: BitScopeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BitScope]!
  settings(where: SettingWhereInput, orderBy: SettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Setting]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  bits(where: BitWhereInput, orderBy: BitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bit]!
  bitExport(where: BitExportWhereUniqueInput!): BitExport
  bitScope(where: BitScopeWhereUniqueInput!): BitScope
  setting(where: SettingWhereUniqueInput!): Setting
  user(where: UserWhereUniqueInput!): User
  bit(where: BitWhereUniqueInput!): Bit
  bitExportsConnection(where: BitExportWhereInput, orderBy: BitExportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BitExportConnection!
  bitScopesConnection(where: BitScopeWhereInput, orderBy: BitScopeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BitScopeConnection!
  settingsConnection(where: SettingWhereInput, orderBy: SettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SettingConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  bitsConnection(where: BitWhereInput, orderBy: BitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BitConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Setting implements Node {
  createdAt: DateTime!
  companyName: String!
  currentServerUser: String!
  id: ID!
  installed: Boolean!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SettingEdge]!
  aggregate: AggregateSetting!
}

input SettingCreateInput {
  companyName: String!
  currentServerUser: String!
  installed: Boolean
}

"""An edge in a connection."""
type SettingEdge {
  """The item at the end of the edge."""
  node: Setting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SettingOrderByInput {
  createdAt_ASC
  createdAt_DESC
  companyName_ASC
  companyName_DESC
  currentServerUser_ASC
  currentServerUser_DESC
  id_ASC
  id_DESC
  installed_ASC
  installed_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SettingPreviousValues {
  createdAt: DateTime!
  companyName: String!
  currentServerUser: String!
  id: ID!
  installed: Boolean!
  updatedAt: DateTime!
}

type SettingSubscriptionPayload {
  mutation: MutationType!
  node: Setting
  updatedFields: [String!]
  previousValues: SettingPreviousValues
}

input SettingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SettingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SettingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SettingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SettingWhereInput
}

input SettingUpdateInput {
  companyName: String
  currentServerUser: String
  installed: Boolean
}

input SettingWhereInput {
  """Logical AND on all given filters."""
  AND: [SettingWhereInput!]

  """Logical OR on all given filters."""
  OR: [SettingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SettingWhereInput!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  companyName: String

  """All values that are not equal to given value."""
  companyName_not: String

  """All values that are contained in given list."""
  companyName_in: [String!]

  """All values that are not contained in given list."""
  companyName_not_in: [String!]

  """All values less than the given value."""
  companyName_lt: String

  """All values less than or equal the given value."""
  companyName_lte: String

  """All values greater than the given value."""
  companyName_gt: String

  """All values greater than or equal the given value."""
  companyName_gte: String

  """All values containing the given string."""
  companyName_contains: String

  """All values not containing the given string."""
  companyName_not_contains: String

  """All values starting with the given string."""
  companyName_starts_with: String

  """All values not starting with the given string."""
  companyName_not_starts_with: String

  """All values ending with the given string."""
  companyName_ends_with: String

  """All values not ending with the given string."""
  companyName_not_ends_with: String
  currentServerUser: String

  """All values that are not equal to given value."""
  currentServerUser_not: String

  """All values that are contained in given list."""
  currentServerUser_in: [String!]

  """All values that are not contained in given list."""
  currentServerUser_not_in: [String!]

  """All values less than the given value."""
  currentServerUser_lt: String

  """All values less than or equal the given value."""
  currentServerUser_lte: String

  """All values greater than the given value."""
  currentServerUser_gt: String

  """All values greater than or equal the given value."""
  currentServerUser_gte: String

  """All values containing the given string."""
  currentServerUser_contains: String

  """All values not containing the given string."""
  currentServerUser_not_contains: String

  """All values starting with the given string."""
  currentServerUser_starts_with: String

  """All values not starting with the given string."""
  currentServerUser_not_starts_with: String

  """All values ending with the given string."""
  currentServerUser_ends_with: String

  """All values not ending with the given string."""
  currentServerUser_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  installed: Boolean

  """All values that are not equal to given value."""
  installed_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SettingWhereUniqueInput {
  companyName: String
  currentServerUser: String
  id: ID
}

type Subscription {
  bitExport(where: BitExportSubscriptionWhereInput): BitExportSubscriptionPayload
  bitScope(where: BitScopeSubscriptionWhereInput): BitScopeSubscriptionPayload
  setting(where: SettingSubscriptionWhereInput): SettingSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  bit(where: BitSubscriptionWhereInput): BitSubscriptionPayload
}

type User implements Node {
  createdAt: DateTime!
  credentials: String
  email: String!
  id: ID!
  name: String!
  password: String!
  role: UserRole!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  credentials: String
  email: String!
  name: String!
  password: String!
  role: UserRole
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  credentials_ASC
  credentials_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  createdAt: DateTime!
  credentials: String
  email: String!
  id: ID!
  name: String!
  password: String!
  role: UserRole!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  USER
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  credentials: String
  email: String
  name: String
  password: String
  role: UserRole
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  credentials: String

  """All values that are not equal to given value."""
  credentials_not: String

  """All values that are contained in given list."""
  credentials_in: [String!]

  """All values that are not contained in given list."""
  credentials_not_in: [String!]

  """All values less than the given value."""
  credentials_lt: String

  """All values less than or equal the given value."""
  credentials_lte: String

  """All values greater than the given value."""
  credentials_gt: String

  """All values greater than or equal the given value."""
  credentials_gte: String

  """All values containing the given string."""
  credentials_contains: String

  """All values not containing the given string."""
  credentials_not_contains: String

  """All values starting with the given string."""
  credentials_starts_with: String

  """All values not starting with the given string."""
  credentials_not_starts_with: String

  """All values ending with the given string."""
  credentials_ends_with: String

  """All values not ending with the given string."""
  credentials_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: UserRole

  """All values that are not equal to given value."""
  role_not: UserRole

  """All values that are contained in given list."""
  role_in: [UserRole!]

  """All values that are not contained in given list."""
  role_not_in: [UserRole!]
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
