// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  bit: (where?: BitWhereInput) => Promise<boolean>;
  bitRepository: (where?: BitRepositoryWhereInput) => Promise<boolean>;
  setting: (where?: SettingWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  bit: (where: BitWhereUniqueInput) => Bit;
  bits: (
    args?: {
      where?: BitWhereInput;
      orderBy?: BitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<BitNode>>;
  bitsConnection: (
    args?: {
      where?: BitWhereInput;
      orderBy?: BitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BitConnection;
  bitRepository: (where: BitRepositoryWhereUniqueInput) => BitRepository;
  bitRepositories: (
    args?: {
      where?: BitRepositoryWhereInput;
      orderBy?: BitRepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<BitRepositoryNode>>;
  bitRepositoriesConnection: (
    args?: {
      where?: BitRepositoryWhereInput;
      orderBy?: BitRepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BitRepositoryConnection;
  setting: (where: SettingWhereUniqueInput) => Setting;
  settings: (
    args?: {
      where?: SettingWhereInput;
      orderBy?: SettingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<SettingNode>>;
  settingsConnection: (
    args?: {
      where?: SettingWhereInput;
      orderBy?: SettingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SettingConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBit: (data: BitCreateInput) => Bit;
  updateBit: (
    args: { data: BitUpdateInput; where: BitWhereUniqueInput }
  ) => Bit;
  updateManyBits: (
    args: { data: BitUpdateInput; where?: BitWhereInput }
  ) => BatchPayload;
  upsertBit: (
    args: {
      where: BitWhereUniqueInput;
      create: BitCreateInput;
      update: BitUpdateInput;
    }
  ) => Bit;
  deleteBit: (where: BitWhereUniqueInput) => Bit;
  deleteManyBits: (where?: BitWhereInput) => BatchPayload;
  createBitRepository: (data: BitRepositoryCreateInput) => BitRepository;
  updateBitRepository: (
    args: {
      data: BitRepositoryUpdateInput;
      where: BitRepositoryWhereUniqueInput;
    }
  ) => BitRepository;
  updateManyBitRepositories: (
    args: { data: BitRepositoryUpdateInput; where?: BitRepositoryWhereInput }
  ) => BatchPayload;
  upsertBitRepository: (
    args: {
      where: BitRepositoryWhereUniqueInput;
      create: BitRepositoryCreateInput;
      update: BitRepositoryUpdateInput;
    }
  ) => BitRepository;
  deleteBitRepository: (where: BitRepositoryWhereUniqueInput) => BitRepository;
  deleteManyBitRepositories: (where?: BitRepositoryWhereInput) => BatchPayload;
  createSetting: (data: SettingCreateInput) => Setting;
  updateSetting: (
    args: { data: SettingUpdateInput; where: SettingWhereUniqueInput }
  ) => Setting;
  updateManySettings: (
    args: { data: SettingUpdateInput; where?: SettingWhereInput }
  ) => BatchPayload;
  upsertSetting: (
    args: {
      where: SettingWhereUniqueInput;
      create: SettingCreateInput;
      update: SettingUpdateInput;
    }
  ) => Setting;
  deleteSetting: (where: SettingWhereUniqueInput) => Setting;
  deleteManySettings: (where?: SettingWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bit: (
    where?: BitSubscriptionWhereInput
  ) => BitSubscriptionPayloadSubscription;
  bitRepository: (
    where?: BitRepositorySubscriptionWhereInput
  ) => BitRepositorySubscriptionPayloadSubscription;
  setting: (
    where?: SettingSubscriptionWhereInput
  ) => SettingSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRole = "ADMIN" | "USER";

export type BitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "version_ASC"
  | "version_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BitRepositoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isLocal_ASC"
  | "isLocal_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SettingOrderByInput =
  | "baseBitPath_ASC"
  | "baseBitPath_DESC"
  | "companyName_ASC"
  | "companyName_DESC"
  | "id_ASC"
  | "id_DESC"
  | "installed_ASC"
  | "installed_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "credentials_ASC"
  | "credentials_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreateWithoutCreatedRepositoriesInput {
  createdBits?: BitCreateManyWithoutCreatedByInput;
  credentials?: String;
  email: String;
  name: String;
  password: String;
  role?: UserRole;
}

export type BitWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BitCreateInput {
  createdBy: UserCreateOneWithoutCreatedBitsInput;
  name: String;
  repository: BitRepositoryCreateOneWithoutBitsInput;
  version: String;
}

export interface BitRepositoryUpdateOneRequiredWithoutBitsInput {
  create?: BitRepositoryCreateWithoutBitsInput;
  update?: BitRepositoryUpdateWithoutBitsDataInput;
  upsert?: BitRepositoryUpsertWithoutBitsInput;
  connect?: BitRepositoryWhereUniqueInput;
}

export interface UserCreateOneWithoutCreatedBitsInput {
  create?: UserCreateWithoutCreatedBitsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutCreatedBitsInput {
  create?: UserCreateWithoutCreatedBitsInput;
  update?: UserUpdateWithoutCreatedBitsDataInput;
  upsert?: UserUpsertWithoutCreatedBitsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutCreatedBitsInput {
  createdRepositories?: BitRepositoryCreateManyWithoutCreatedByInput;
  credentials?: String;
  email: String;
  name: String;
  password: String;
  role?: UserRole;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface BitRepositoryCreateManyWithoutCreatedByInput {
  create?:
    | BitRepositoryCreateWithoutCreatedByInput[]
    | BitRepositoryCreateWithoutCreatedByInput;
  connect?: BitRepositoryWhereUniqueInput[] | BitRepositoryWhereUniqueInput;
}

export interface SettingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SettingWhereInput;
  AND?: SettingSubscriptionWhereInput[] | SettingSubscriptionWhereInput;
  OR?: SettingSubscriptionWhereInput[] | SettingSubscriptionWhereInput;
  NOT?: SettingSubscriptionWhereInput[] | SettingSubscriptionWhereInput;
}

export interface BitRepositoryCreateWithoutCreatedByInput {
  bits?: BitCreateManyWithoutRepositoryInput;
  isLocal?: Boolean;
  name: String;
  url: String;
}

export interface BitSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BitWhereInput;
  AND?: BitSubscriptionWhereInput[] | BitSubscriptionWhereInput;
  OR?: BitSubscriptionWhereInput[] | BitSubscriptionWhereInput;
  NOT?: BitSubscriptionWhereInput[] | BitSubscriptionWhereInput;
}

export interface BitCreateManyWithoutRepositoryInput {
  create?: BitCreateWithoutRepositoryInput[] | BitCreateWithoutRepositoryInput;
  connect?: BitWhereUniqueInput[] | BitWhereUniqueInput;
}

export interface UserCreateInput {
  createdBits?: BitCreateManyWithoutCreatedByInput;
  createdRepositories?: BitRepositoryCreateManyWithoutCreatedByInput;
  credentials?: String;
  email: String;
  name: String;
  password: String;
  role?: UserRole;
}

export interface BitCreateWithoutRepositoryInput {
  createdBy: UserCreateOneWithoutCreatedBitsInput;
  name: String;
  version: String;
}

export interface SettingUpdateInput {
  baseBitPath?: String;
  companyName?: String;
  installed?: Boolean;
}

export interface BitRepositoryCreateOneWithoutBitsInput {
  create?: BitRepositoryCreateWithoutBitsInput;
  connect?: BitRepositoryWhereUniqueInput;
}

export interface BitRepositoryUpdateInput {
  bits?: BitUpdateManyWithoutRepositoryInput;
  createdBy?: UserUpdateOneRequiredWithoutCreatedRepositoriesInput;
  isLocal?: Boolean;
  name?: String;
  url?: String;
}

export interface BitRepositoryCreateWithoutBitsInput {
  createdBy: UserCreateOneWithoutCreatedRepositoriesInput;
  isLocal?: Boolean;
  name: String;
  url: String;
}

export interface BitRepositoryCreateInput {
  bits?: BitCreateManyWithoutRepositoryInput;
  createdBy: UserCreateOneWithoutCreatedRepositoriesInput;
  isLocal?: Boolean;
  name: String;
  url: String;
}

export interface UserCreateOneWithoutCreatedRepositoriesInput {
  create?: UserCreateWithoutCreatedRepositoriesInput;
  connect?: UserWhereUniqueInput;
}

export interface BitWhereInput {
  createdBy?: UserWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  repository?: BitRepositoryWhereInput;
  version?: String;
  version_not?: String;
  version_in?: String[] | String;
  version_not_in?: String[] | String;
  version_lt?: String;
  version_lte?: String;
  version_gt?: String;
  version_gte?: String;
  version_contains?: String;
  version_not_contains?: String;
  version_starts_with?: String;
  version_not_starts_with?: String;
  version_ends_with?: String;
  version_not_ends_with?: String;
  AND?: BitWhereInput[] | BitWhereInput;
  OR?: BitWhereInput[] | BitWhereInput;
  NOT?: BitWhereInput[] | BitWhereInput;
}

export interface UserUpdateOneRequiredWithoutCreatedRepositoriesInput {
  create?: UserCreateWithoutCreatedRepositoriesInput;
  update?: UserUpdateWithoutCreatedRepositoriesDataInput;
  upsert?: UserUpsertWithoutCreatedRepositoriesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithoutCreatedRepositoriesInput {
  update: UserUpdateWithoutCreatedRepositoriesDataInput;
  create: UserCreateWithoutCreatedRepositoriesInput;
}

export interface BitCreateManyWithoutCreatedByInput {
  create?: BitCreateWithoutCreatedByInput[] | BitCreateWithoutCreatedByInput;
  connect?: BitWhereUniqueInput[] | BitWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  email: String;
}>;

export interface BitCreateWithoutCreatedByInput {
  name: String;
  repository: BitRepositoryCreateOneWithoutBitsInput;
  version: String;
}

export interface BitUpdateWithWhereUniqueWithoutCreatedByInput {
  where: BitWhereUniqueInput;
  data: BitUpdateWithoutCreatedByDataInput;
}

export interface BitUpdateInput {
  createdBy?: UserUpdateOneRequiredWithoutCreatedBitsInput;
  name?: String;
  repository?: BitRepositoryUpdateOneRequiredWithoutBitsInput;
  version?: String;
}

export interface UserUpdateWithoutCreatedRepositoriesDataInput {
  createdBits?: BitUpdateManyWithoutCreatedByInput;
  credentials?: String;
  email?: String;
  name?: String;
  password?: String;
  role?: UserRole;
}

export interface BitRepositoryUpdateWithoutBitsDataInput {
  createdBy?: UserUpdateOneRequiredWithoutCreatedRepositoriesInput;
  isLocal?: Boolean;
  name?: String;
  url?: String;
}

export interface BitRepositoryWhereInput {
  bits_every?: BitWhereInput;
  bits_some?: BitWhereInput;
  bits_none?: BitWhereInput;
  createdBy?: UserWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isLocal?: Boolean;
  isLocal_not?: Boolean;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: BitRepositoryWhereInput[] | BitRepositoryWhereInput;
  OR?: BitRepositoryWhereInput[] | BitRepositoryWhereInput;
  NOT?: BitRepositoryWhereInput[] | BitRepositoryWhereInput;
}

export interface UserUpdateWithoutCreatedBitsDataInput {
  createdRepositories?: BitRepositoryUpdateManyWithoutCreatedByInput;
  credentials?: String;
  email?: String;
  name?: String;
  password?: String;
  role?: UserRole;
}

export interface BitRepositorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BitRepositoryWhereInput;
  AND?:
    | BitRepositorySubscriptionWhereInput[]
    | BitRepositorySubscriptionWhereInput;
  OR?:
    | BitRepositorySubscriptionWhereInput[]
    | BitRepositorySubscriptionWhereInput;
  NOT?:
    | BitRepositorySubscriptionWhereInput[]
    | BitRepositorySubscriptionWhereInput;
}

export interface BitRepositoryUpdateManyWithoutCreatedByInput {
  create?:
    | BitRepositoryCreateWithoutCreatedByInput[]
    | BitRepositoryCreateWithoutCreatedByInput;
  delete?: BitRepositoryWhereUniqueInput[] | BitRepositoryWhereUniqueInput;
  connect?: BitRepositoryWhereUniqueInput[] | BitRepositoryWhereUniqueInput;
  disconnect?: BitRepositoryWhereUniqueInput[] | BitRepositoryWhereUniqueInput;
  update?:
    | BitRepositoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    | BitRepositoryUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | BitRepositoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    | BitRepositoryUpsertWithWhereUniqueWithoutCreatedByInput;
}

export type BitRepositoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  url?: String;
}>;

export interface BitRepositoryUpdateWithWhereUniqueWithoutCreatedByInput {
  where: BitRepositoryWhereUniqueInput;
  data: BitRepositoryUpdateWithoutCreatedByDataInput;
}

export type SettingWhereUniqueInput = AtLeastOne<{
  baseBitPath: String;
  companyName?: String;
  id?: ID_Input;
}>;

export interface BitRepositoryUpdateWithoutCreatedByDataInput {
  bits?: BitUpdateManyWithoutRepositoryInput;
  isLocal?: Boolean;
  name?: String;
  url?: String;
}

export interface BitRepositoryUpsertWithoutBitsInput {
  update: BitRepositoryUpdateWithoutBitsDataInput;
  create: BitRepositoryCreateWithoutBitsInput;
}

export interface BitUpdateManyWithoutRepositoryInput {
  create?: BitCreateWithoutRepositoryInput[] | BitCreateWithoutRepositoryInput;
  delete?: BitWhereUniqueInput[] | BitWhereUniqueInput;
  connect?: BitWhereUniqueInput[] | BitWhereUniqueInput;
  disconnect?: BitWhereUniqueInput[] | BitWhereUniqueInput;
  update?:
    | BitUpdateWithWhereUniqueWithoutRepositoryInput[]
    | BitUpdateWithWhereUniqueWithoutRepositoryInput;
  upsert?:
    | BitUpsertWithWhereUniqueWithoutRepositoryInput[]
    | BitUpsertWithWhereUniqueWithoutRepositoryInput;
}

export interface BitUpdateWithoutCreatedByDataInput {
  name?: String;
  repository?: BitRepositoryUpdateOneRequiredWithoutBitsInput;
  version?: String;
}

export interface BitUpdateWithWhereUniqueWithoutRepositoryInput {
  where: BitWhereUniqueInput;
  data: BitUpdateWithoutRepositoryDataInput;
}

export interface UserUpdateInput {
  createdBits?: BitUpdateManyWithoutCreatedByInput;
  createdRepositories?: BitRepositoryUpdateManyWithoutCreatedByInput;
  credentials?: String;
  email?: String;
  name?: String;
  password?: String;
  role?: UserRole;
}

export interface UserUpsertWithoutCreatedBitsInput {
  update: UserUpdateWithoutCreatedBitsDataInput;
  create: UserCreateWithoutCreatedBitsInput;
}

export interface BitRepositoryUpsertWithWhereUniqueWithoutCreatedByInput {
  where: BitRepositoryWhereUniqueInput;
  update: BitRepositoryUpdateWithoutCreatedByDataInput;
  create: BitRepositoryCreateWithoutCreatedByInput;
}

export interface BitUpsertWithWhereUniqueWithoutRepositoryInput {
  where: BitWhereUniqueInput;
  update: BitUpdateWithoutRepositoryDataInput;
  create: BitCreateWithoutRepositoryInput;
}

export interface BitUpdateWithoutRepositoryDataInput {
  createdBy?: UserUpdateOneRequiredWithoutCreatedBitsInput;
  name?: String;
  version?: String;
}

export interface SettingCreateInput {
  baseBitPath: String;
  companyName: String;
  installed?: Boolean;
}

export interface UserWhereInput {
  createdBits_every?: BitWhereInput;
  createdBits_some?: BitWhereInput;
  createdBits_none?: BitWhereInput;
  createdRepositories_every?: BitRepositoryWhereInput;
  createdRepositories_some?: BitRepositoryWhereInput;
  createdRepositories_none?: BitRepositoryWhereInput;
  credentials?: String;
  credentials_not?: String;
  credentials_in?: String[] | String;
  credentials_not_in?: String[] | String;
  credentials_lt?: String;
  credentials_lte?: String;
  credentials_gt?: String;
  credentials_gte?: String;
  credentials_contains?: String;
  credentials_not_contains?: String;
  credentials_starts_with?: String;
  credentials_not_starts_with?: String;
  credentials_ends_with?: String;
  credentials_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  role?: UserRole;
  role_not?: UserRole;
  role_in?: UserRole[] | UserRole;
  role_not_in?: UserRole[] | UserRole;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface BitUpdateManyWithoutCreatedByInput {
  create?: BitCreateWithoutCreatedByInput[] | BitCreateWithoutCreatedByInput;
  delete?: BitWhereUniqueInput[] | BitWhereUniqueInput;
  connect?: BitWhereUniqueInput[] | BitWhereUniqueInput;
  disconnect?: BitWhereUniqueInput[] | BitWhereUniqueInput;
  update?:
    | BitUpdateWithWhereUniqueWithoutCreatedByInput[]
    | BitUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | BitUpsertWithWhereUniqueWithoutCreatedByInput[]
    | BitUpsertWithWhereUniqueWithoutCreatedByInput;
}

export interface BitUpsertWithWhereUniqueWithoutCreatedByInput {
  where: BitWhereUniqueInput;
  update: BitUpdateWithoutCreatedByDataInput;
  create: BitCreateWithoutCreatedByInput;
}

export interface SettingWhereInput {
  baseBitPath?: String;
  baseBitPath_not?: String;
  baseBitPath_in?: String[] | String;
  baseBitPath_not_in?: String[] | String;
  baseBitPath_lt?: String;
  baseBitPath_lte?: String;
  baseBitPath_gt?: String;
  baseBitPath_gte?: String;
  baseBitPath_contains?: String;
  baseBitPath_not_contains?: String;
  baseBitPath_starts_with?: String;
  baseBitPath_not_starts_with?: String;
  baseBitPath_ends_with?: String;
  baseBitPath_not_ends_with?: String;
  companyName?: String;
  companyName_not?: String;
  companyName_in?: String[] | String;
  companyName_not_in?: String[] | String;
  companyName_lt?: String;
  companyName_lte?: String;
  companyName_gt?: String;
  companyName_gte?: String;
  companyName_contains?: String;
  companyName_not_contains?: String;
  companyName_starts_with?: String;
  companyName_not_starts_with?: String;
  companyName_ends_with?: String;
  companyName_not_ends_with?: String;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  installed?: Boolean;
  installed_not?: Boolean;
  AND?: SettingWhereInput[] | SettingWhereInput;
  OR?: SettingWhereInput[] | SettingWhereInput;
  NOT?: SettingWhereInput[] | SettingWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  credentials?: String;
  email: String;
  name: String;
  password: String;
  role: UserRole;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  credentials: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  credentials: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

export interface BitRepositoryEdgeNode {
  cursor: String;
}

export interface BitRepositoryEdge
  extends Promise<BitRepositoryEdgeNode>,
    Fragmentable {
  node: <T = BitRepository>() => T;
  cursor: () => Promise<String>;
}

export interface BitRepositoryEdgeSubscription
  extends Promise<AsyncIterator<BitRepositoryEdgeNode>>,
    Fragmentable {
  node: <T = BitRepositorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SettingSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SettingSubscriptionPayload
  extends Promise<SettingSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Setting>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SettingPreviousValues>() => T;
}

export interface SettingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SettingSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SettingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SettingPreviousValuesSubscription>() => T;
}

export interface BitRepositoryConnectionNode {}

export interface BitRepositoryConnection
  extends Promise<BitRepositoryConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<BitRepositoryEdgeNode>>>() => T;
  aggregate: <T = AggregateBitRepository>() => T;
}

export interface BitRepositoryConnectionSubscription
  extends Promise<AsyncIterator<BitRepositoryConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<BitRepositoryEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateBitRepositorySubscription>() => T;
}

export interface AggregateBitNode {
  count: Int;
}

export interface AggregateBit extends Promise<AggregateBitNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBitSubscription
  extends Promise<AsyncIterator<AggregateBitNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SettingPreviousValuesNode {
  baseBitPath: String;
  companyName: String;
  id: ID_Output;
  installed: Boolean;
}

export interface SettingPreviousValues
  extends Promise<SettingPreviousValuesNode>,
    Fragmentable {
  baseBitPath: () => Promise<String>;
  companyName: () => Promise<String>;
  id: () => Promise<ID_Output>;
  installed: () => Promise<Boolean>;
}

export interface SettingPreviousValuesSubscription
  extends Promise<AsyncIterator<SettingPreviousValuesNode>>,
    Fragmentable {
  baseBitPath: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  installed: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BitEdgeNode {
  cursor: String;
}

export interface BitEdge extends Promise<BitEdgeNode>, Fragmentable {
  node: <T = Bit>() => T;
  cursor: () => Promise<String>;
}

export interface BitEdgeSubscription
  extends Promise<AsyncIterator<BitEdgeNode>>,
    Fragmentable {
  node: <T = BitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserNode {
  credentials?: String;
  email: String;
  name: String;
  password: String;
  role: UserRole;
}

export interface User extends Promise<UserNode>, Fragmentable {
  createdBits: <T = Promise<Array<BitNode>>>(
    args?: {
      where?: BitWhereInput;
      orderBy?: BitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdRepositories: <T = Promise<Array<BitRepositoryNode>>>(
    args?: {
      where?: BitRepositoryWhereInput;
      orderBy?: BitRepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  credentials: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  createdBits: <T = Promise<AsyncIterator<Array<BitSubscription>>>>(
    args?: {
      where?: BitWhereInput;
      orderBy?: BitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdRepositories: <
    T = Promise<AsyncIterator<Array<BitRepositorySubscription>>>
  >(
    args?: {
      where?: BitRepositoryWhereInput;
      orderBy?: BitRepositoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  credentials: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SettingEdgeNode {
  cursor: String;
}

export interface SettingEdge extends Promise<SettingEdgeNode>, Fragmentable {
  node: <T = Setting>() => T;
  cursor: () => Promise<String>;
}

export interface SettingEdgeSubscription
  extends Promise<AsyncIterator<SettingEdgeNode>>,
    Fragmentable {
  node: <T = SettingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BitNode {
  id: ID_Output;
  name: String;
  version: String;
}

export interface Bit extends Promise<BitNode>, Fragmentable {
  createdBy: <T = User>() => T;
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  repository: <T = BitRepository>() => T;
  version: () => Promise<String>;
}

export interface BitSubscription
  extends Promise<AsyncIterator<BitNode>>,
    Fragmentable {
  createdBy: <T = UserSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  repository: <T = BitRepositorySubscription>() => T;
  version: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BitSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface BitSubscriptionPayload
  extends Promise<BitSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Bit>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BitPreviousValues>() => T;
}

export interface BitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BitSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BitPreviousValuesSubscription>() => T;
}

export interface SettingNode {
  baseBitPath: String;
  companyName: String;
  id: ID_Output;
  installed: Boolean;
}

export interface Setting extends Promise<SettingNode>, Fragmentable {
  baseBitPath: () => Promise<String>;
  companyName: () => Promise<String>;
  id: () => Promise<ID_Output>;
  installed: () => Promise<Boolean>;
}

export interface SettingSubscription
  extends Promise<AsyncIterator<SettingNode>>,
    Fragmentable {
  baseBitPath: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  installed: () => Promise<AsyncIterator<Boolean>>;
}

export interface BitPreviousValuesNode {
  id: ID_Output;
  name: String;
  version: String;
}

export interface BitPreviousValues
  extends Promise<BitPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  version: () => Promise<String>;
}

export interface BitPreviousValuesSubscription
  extends Promise<AsyncIterator<BitPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  version: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSettingNode {
  count: Int;
}

export interface AggregateSetting
  extends Promise<AggregateSettingNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSettingSubscription
  extends Promise<AsyncIterator<AggregateSettingNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BitRepositoryNode {
  id: ID_Output;
  isLocal: Boolean;
  name: String;
  url: String;
}

export interface BitRepository
  extends Promise<BitRepositoryNode>,
    Fragmentable {
  bits: <T = Promise<Array<BitNode>>>(
    args?: {
      where?: BitWhereInput;
      orderBy?: BitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdBy: <T = User>() => T;
  id: () => Promise<ID_Output>;
  isLocal: () => Promise<Boolean>;
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface BitRepositorySubscription
  extends Promise<AsyncIterator<BitRepositoryNode>>,
    Fragmentable {
  bits: <T = Promise<AsyncIterator<Array<BitSubscription>>>>(
    args?: {
      where?: BitWhereInput;
      orderBy?: BitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdBy: <T = UserSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  isLocal: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface BitRepositoryPreviousValuesNode {
  id: ID_Output;
  isLocal: Boolean;
  name: String;
  url: String;
}

export interface BitRepositoryPreviousValues
  extends Promise<BitRepositoryPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isLocal: () => Promise<Boolean>;
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface BitRepositoryPreviousValuesSubscription
  extends Promise<AsyncIterator<BitRepositoryPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isLocal: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface BitRepositorySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface BitRepositorySubscriptionPayload
  extends Promise<BitRepositorySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BitRepository>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BitRepositoryPreviousValues>() => T;
}

export interface BitRepositorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BitRepositorySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BitRepositorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BitRepositoryPreviousValuesSubscription>() => T;
}

export interface BitConnectionNode {}

export interface BitConnection
  extends Promise<BitConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<BitEdgeNode>>>() => T;
  aggregate: <T = AggregateBit>() => T;
}

export interface BitConnectionSubscription
  extends Promise<AsyncIterator<BitConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<BitEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateBitSubscription>() => T;
}

export interface SettingConnectionNode {}

export interface SettingConnection
  extends Promise<SettingConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SettingEdgeNode>>>() => T;
  aggregate: <T = AggregateSetting>() => T;
}

export interface SettingConnectionSubscription
  extends Promise<AsyncIterator<SettingConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<SettingEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateSettingSubscription>() => T;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateBitRepositoryNode {
  count: Int;
}

export interface AggregateBitRepository
  extends Promise<AggregateBitRepositoryNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBitRepositorySubscription
  extends Promise<AsyncIterator<AggregateBitRepositoryNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: "http://localhost:4466"
});
export const prisma = new Prisma();
